
;;

(define (tagged-list? exp tag)
  (if (pair? exp)
      (eq? (car exp) tag)
      false))
;;machine
(define (make-machine rnames ops controller-text)
    (let ((machine (make-new-machine)))
        (for-each (lambda (reg-name)
                        ((machine 'allocate-register) reg-name))
                  rnames)
        ((machine 'install-operations) ops)
        ((machine 'install-instruction-sequence) (assemble controller-text machine))
      machine))

(define (make-new-machine)
    (let ((pc (make-register 'pc))
          (flag (make-register 'flag))
          (stack (make-stack))
          (the-instruction-sequence '())
          (the-labels '())
          (count 0)
          (trace-flag #f)
          (break-point-table '())
          (proceed-flag #f)
          )
      (let ((the-ops
                (list (list 'initialize-stack (lambda () (statck 'initialize)))))
            (register-table
                (list (list 'pc pc) (list 'flag flag))))
        (define (print-regs-info)
            (map (lambda (reg)
                  (let ((reg-ct (get-contents (cadr reg))))
                    (if (pair? reg-ct)
                        (list (car reg) '*pointer*)
                        (list (car reg) reg-ct))))
                register-table))
        (define (print-stack-info)
            (map (lambda (e)
                  (if (pair? e)
                      '*pointer*
                      e)) (stack 'debug)))
        (define (allocate-register name)
            (if (assoc name register-table)
                (error "Multiply defined register: " name)
                (set! register-table
                        (cons (list name (make-register name))
                              register-table)))
            'register-allocated)
        (define (lookup-register name)
            (let ((val (assoc name register-table)))
                (if val
                    (cadr val)
                    (error "Unknown register: " name))))
        (define (execute)
            (let ((insts (get-contents pc)))
                (if (null? insts)
                    'done
                    (begin
                        (if trace-flag
                          (begin
                            (newline)
                            ;(display "Regs: ")
                            ;(display (print-regs-info))
                            ;(newline)
                            (display "Stack: ")
                            (display (print-stack-info))
                            (newline)
                            (display (car insts))
                            ;(display insts)
                            (newline))
                          )
                        (if (or proceed-flag (not (member insts break-point-table)))
                            (begin
                                ((instruction-execution-proc (car insts)))
                                (set! count (+ count 1))
                                (set! proceed-flag #f)
                                (execute))
                            (begin
                                (set! proceed-flag #f)
                                (display "Arrived breakpoint")))
                    ))))
        (define (set-my-breakpoint label n)
            (let ((label-object (lookup-label the-labels label)))
                (define (iter lo n)
                    (if (or (= n 0) (null? lo))
                        lo
                        (iter (cdr lo) (- n 1))))
                ;(display label-object)
                (if label-object
                    (let ((inst-pointer (iter label-object n)))
                      (if inst-pointer
                         (set! break-point-table
                            (cons inst-pointer break-point-table))
                         (error "Error breakpoint")))
                    (error "Unknown label -- SET-BREAKPOINT" label))
                ;(newline)
                ;(display break-point-table)
                ))
;        (define (cancel-breakpoint label n)
;            (define (iter old-entry next-entry)
;                (if (null? old-entry)
;                    (error "Unknown breakpoint -- " label)
;                    (let ((b (car table)))
;                        (if (and (eq? (breakpoint-label b) label)
;                                 (eq? (breakpoint-n b) n))
;                            (set-cdr! old-entry next-entry)))))
;                            ;(if (null? next-entry)
;                            ;    (iter old-entry )
;                            ;    (iter next-entry ()))))))
;            (iter break-point-table (cdr next-entry)))
        (define (dispatch message)
            (cond ((eq? message 'start)
                     (set-contents! pc the-instruction-sequence)
                     (execute))
                  ((eq? message 'install-instruction-sequence)
                     (lambda (seq-and-labels) (set! the-instruction-sequence (car seq-and-labels))
                                              (set! the-labels (cdr seq-and-labels))))
                  ((eq? message 'allocate-register) allocate-register)
                  ((eq? message 'get-register) lookup-register)
                  ((eq? message 'install-operations)
                     (lambda (ops) (set! the-ops (append the-ops ops))))
                  ((eq? message 'stack) stack)
                  ((eq? message 'operations) the-ops)
                  ((eq? message 'print-pc-count) count) ; exercise 5.15
                  ((eq? message 'reset-pc-count) (set! count 0))
                  ((eq? message 'trace-off) (set! trace-flag #f)) ; exercise 5.16
                  ((eq? message 'trace-on) (set! trace-flag #t))
                  ((eq? message 'set-breakpoint)
                        set-my-breakpoint) ; exercise 5.19
                  ((eq? message 'cancel-breakpoint) ())
                  ((eq? message 'proceed-machine)
                   (set! proceed-flag #t)
                   (execute))
                  ((eq? message 'cancel-all-breakpoints) (set! break-point-table '()))
                  (else (error "Uknown request -- MACHINE" message))))
        dispatch)))
;; brackpoint
(define (make-breakpoint label n pointer)
    (list label n pointer))

;; register
(define (make-register name)
    (let ((contents '*unassigned*)
          (trace-flag #f))
        (define (dispatch message)
            (cond ((eq? message 'get) contents)
                  ((eq? message 'set)
                        (lambda (value)
                            (if trace-flag
                              (begin
                                (display name)
                                (display ": ")
                                (if (pair? contents)
                                    (display '*pointer*)
                                    (display contents))
                                (display " ==> ")
                                (display value)
                                (display " ")
                                (newline))
                              )
                            (set! contents value)))
                  ((eq? message 'trace-off) (set! trace-flag #f))
                  ((eq? message 'trace-on) (set! trace-flag #t))
                  (else (error "Unknown request -- REGISTER" message))))
        dispatch))
(define (get-contents register) (register 'get))
(define (set-contents! register value)
    ((register 'set) value))

;: stack
(define (make-stack)
    (let ((s '()))
        (define (push x)
            (set! s (cons x s)))
        (define (pop)
            (if (null? s)
                (error "Empty stack -- POP")
                (let ((top (car s)))
                    (set! s (cdr s))
                    top)))
        (define (initialize)
            (set! s '())
            'done)
        (define (dispatch message)
            (cond ((eq? message 'push) push)
                  ((eq? message 'pop) (pop))
                  ((eq? message 'initialize) (initialize))
                  ((eq? message 'debug) s)
                  (else (error "Unknown request -- STACK" message))))
        dispatch))
(define (pop stack) (stack 'pop))
(define (push stack value) ((stack 'push) value))

;: assembler
(define (assemble controller-text machine)
    (extract-labels controller-text
        (lambda (insts labels)
            ;(display insts)
            ;(newline)
            ;(display labels)
            ;(newline)
            (update-insts! insts labels machine)
            (cons insts labels))))

;: receive contruct the  callbacks chain.
(define (extract-labels text receive)
    (if (null? text)
        (receive '() '())
        (extract-labels (cdr text)
            (lambda (insts labels)
                (let ((next-inst (car text)))
                    (if (symbol? next-inst)
                        (receive insts
                                 (if (and (not (null? labels)) ; exercise 5.8
                                          (assoc next-inst labels))
                                     (error "Multiply label -- ASSEMBLE: " next-inst)
                                     (cons (make-label-entry next-inst insts) labels)))
                        (receive (cons (make-instruction next-inst) insts) labels)))))))

(define (update-insts! insts labels machine)
    (let ((pc (get-register machine 'pc))
          (flag (get-register machine 'flag))
          (stack (machine 'stack))
          (ops (machine 'operations)))
     ;(display pc)
     ;(display flag)
     ;(display stack)
     ;(display ops)
     (for-each
        (lambda (inst)
            (set-instruction-execution-proc! inst
                (make-execution-procedure (instruction-text inst)
                                          labels machine pc flag stack ops)))
        insts)))

(define (make-execution-procedure inst labels machine pc flag stack ops)
    (cond ((eq? (car inst) 'assign)
            (make-assign inst machine labels ops pc))
          ((eq? (car inst) 'test)
            (make-test inst machine labels ops flag pc))
          ((eq? (car inst) 'branch)
            (make-branch inst machine labels flag pc))
          ((eq? (car inst) 'goto)
            (make-goto inst machine labels pc))
          ((eq? (car inst) 'save)
            (make-save inst machine stack pc))
          ((eq? (car inst) 'restore)
            (make-restore inst machine stack pc))
          ((eq? (car inst) 'perform)
            (make-perform inst machine labels ops pc))
          (else (error "Unknown instruction type -- ASSEMBLE " inst))))

;; instruction
(define (make-instruction text)
    (cons text '()))
(define (instruction-text inst)
    (car inst))
(define (instruction-execution-proc inst)
    (cdr inst))
(define (set-instruction-execution-proc! inst proc)
    (set-cdr! inst proc))

;; label
; insts is the pointer which point to next instruction of insts.
(define (make-label-entry label-name insts)
    (cons label-name insts))
(define (lookup-label labels label-name)
    (let ((val (assoc label-name labels)))
        (if val
            (cdr val)
            (error "Undefined label -- ASSEMBLE" label-name))))
(define (addvance-pc pc)
    (set-contents! pc (cdr (get-contents pc))))
;; assign
(define (make-assign inst machine labels ops pc)
    (let ((target (get-register machine (assign-reg-name inst)))
          (value-exp (assign-value-exp inst)))
        (let ((value-proc ;; this work will do only one time.
                (if (operation-exp? value-exp)
                    (make-operation-exp value-exp machine labels ops)
                    (make-primitive-exp
                        (car value-exp) machine labels))))
            (lambda ()
                (set-contents! target (value-proc))
                (addvance-pc pc)))))
(define (assign-reg-name assign-inst)
    (cadr assign-inst))
(define (assign-value-exp assign-inst)
    (cddr assign-inst))

;; test
(define (make-test inst machine labels ops flag pc)
    (let ((condition (test-condition inst)))
        (if (operation-exp? condition)
            (let ((condition-proc
                    (make-operation-exp condition machine labels ops)))
                (lambda ()
                    (set-contents! flag (condition-proc))
                    (addvance-pc pc)))
            (error "Bad Test instruction -- ASSEMBLE" inst))))
(define (test-condition test-inst)
    (cdr test-inst))

;; branch
(define (make-branch inst machine labels flag pc)
    (let ((dest (branch-dest inst)))
        (if (label-exp? dest)
            (let ((insts
                    (lookup-label labels (label-exp-label dest))))
              (lambda ()
                    (if (get-contents flag)
                        (set-contents! pc insts)
                        (addvance-pc pc))))
            (error "Bad BRANCH instruction -- ASSEMBLE" inst))))

(define (branch-dest branch-inst)
    (cadr branch-inst))

;; goto
(define (make-goto inst machine labels pc)
    (let ((dest (goto-dest inst)))
        (cond ((label-exp? dest)
                (let ((insts
                        (lookup-label labels (label-exp-label dest))))
                    (lambda () (set-contents! pc insts))))
              ((register-exp? dest)
                (let ((reg
                        (get-register machine (register-exp-reg dest))))
                    (lambda () (set-contents! pc (get-contents reg)))))
              (else (error "Bad GOTO instruction -- ASSEMBLE" inst)))))
(define (goto-dest inst)
    (cadr inst))

;; save, restore
(define (make-save inst machine stack pc)
    (let ((reg (get-register machine (stack-inst-reg-name inst))))
        (lambda ()
            (push stack (get-contents reg))
            (addvance-pc pc))))
(define (make-restore inst machine stack pc)
    (let ((reg (get-register machine (stack-inst-reg-name inst))))
        (lambda ()
            (set-contents! reg (pop stack))
            (addvance-pc pc))))
(define (stack-inst-reg-name inst)
    (cadr inst))

;; perform
(define (make-perform inst machine labels ops pc)
    (let ((action (perform-action inst)))
        (if (operation-exp? action)
            (let ((action-proc
                    (make-operation-exp action machine labels ops)))
                (lambda ()
                    (action-proc)
                    (addvance-pc pc)))
            (error "Bad PROFORM instruction -- ASSEMBLE" inst))))
(define (perform-action inst) (cdr inst))


;;
(define (make-primitive-exp exp machine labels)
    (cond ((constant-exp? exp)
            (let ((c (constant-exp-value exp)))
                (lambda () c)))
          ((label-exp? exp)
            (let ((insts
                    (lookup-label labels (label-exp-label exp))))
                (lambda () insts)))
          ((register-exp? exp)
            (let ((r (get-register machine (register-exp-reg exp))))
                (lambda () (get-contents r))))
          (else (error "Unknown expression type -- ASSEMBLE" inst))))
(define (register-exp? exp) (tagged-list? exp 'reg))
(define (register-exp-reg exp) (cadr exp))
(define (constant-exp? exp) (tagged-list? exp 'const))
(define (constant-exp-value exp) (cadr exp))
(define (label-exp? exp) (tagged-list? exp 'label))
(define (label-exp-label exp) (cadr exp))

(define (make-operation-exp exp machine labels ops)
    (let ((op (lookup-prim (operation-exp-op exp) ops))
          (aprocs
            (map (lambda (e) (make-primitive-exp e machine labels))
                 (operation-exp-operands exp))))
        (lambda ()
            (apply op (map (lambda (p) (p)) aprocs)))))
(define (operation-exp? exp)
    (and (pair? exp) (tagged-list? (car exp) 'op)))
(define (operation-exp-op exp)
    (cadr (car exp)))
(define (operation-exp-operands exp)
    (cdr exp))
(define (lookup-prim symbol ops)
    (let ((val (assoc symbol ops)))
        (if val
            (cadr val)
            (error "Unknown operation -- ASSEMBLE" symbol))))
(define (set-register-contents! machine rname val)
    (set-contents! (get-register machine rname) val))
(define (get-register-contents machine rname)
    (get-contents (get-register machine rname)))
(define (start machine)(machine 'start))

(define (get-register machine rname)
    ((machine 'get-register) rname))
;; exercise 5.18
(define (trace-register-on machine rname)
    ((get-register machine rname) 'trace-on))
(define (trace-register-off machine rname)
    ((get-register machine rname) 'trace-off))

;; exercise 5.19
(define (set-breakpoint machine label n)
    ((machine 'set-breakpoint) label n))
(define (cancel-breakpoint machine label n)
    ((machine 'cancel-breakpoint) label n))
(define (proceed-machine machine)
    (machine 'proceed-machine))
(define (cancel-all-breakpoints machine)
    (machine 'cancel-all-breakpoints))
